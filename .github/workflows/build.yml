name: Build Modules
on: 
  workflow_call:
  workflow_dispatch:
  push:
   paths-ignore:
      - '**.md'
jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "17"
          
      - name: Install aapt
        run: |
          sudo apt install aapt jq
          
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true
        
      - name: Build Modules/APKs
        run: |
          chmod +x ./build.sh
          echo "" >version.conf
          ./build.sh build
        env:
          GITHUB_REPOSITORY: $GITHUB_REPOSITORY
      
      - name: Get next version code
        id: next_ver_code
        run: |
          cd temp
          TAG=$(find . -maxdepth 1 -name "revanced-patches*.jar" -printf '%P')
          TAG=${TAG##*'-'}
          TAG=${TAG::-4}
          if [ -z "$TAG" ]; then TAG=0; fi
          echo "NEXT_VER_CODE=$TAG" >> $GITHUB_OUTPUT
          echo $TAG
          
          rm_op=$(find . -maxdepth 1 -name "rvmn.apk" -printf '%P')
          ver_code=$(aapt dump badging $rm_op | sed -n "s/.*versionName='\([^']*\).*/\1/p")
          echo "RM_VER_NAME_OUTPUT=$ver_code"  >> $GITHUB_OUTPUT
          echo $ver_code
          ver_code=$(aapt dump badging $rm_op | sed -n "s/.*versionCode='\([^']*\).*/\1/p")
          echo "RM_VER_CODE_OUTPUT=$ver_code"  >> $GITHUB_OUTPUT
          echo $ver_code
          
          
          mg_op=$(find . -maxdepth 1 -name "microg.apk" -printf '%P')
          ver_code=$(aapt dump badging $mg_op | sed -n "s/.*versionName='\([^']*\).*/\1/p")
          echo $ver_code
          echo "MG_VER_NAME_OUTPUT=$ver_code"  >> $GITHUB_OUTPUT
          ver_code=$(aapt dump badging $mg_op | sed -n "s/.*versionCode='\([^']*\).*/\1/p")
          echo "MG_VER_CODE_OUTPUT=$ver_code"  >> $GITHUB_OUTPUT
          echo $ver_code
          
          
      - id: get_output
        run: |
          BUILD_LOG=$(cat build.log)
          BUILD_LOG="${BUILD_LOG//'%'/'%25'}"
          BUILD_LOG="${BUILD_LOG//$'\n'/'%0A'}"
          BUILD_LOG="${BUILD_LOG//$'\r'/'%0D'}"

          echo "BUILD_LOG=$BUILD_LOG"  >> $GITHUB_OUTPUT

          cd build
          yt_ex=$(find . -maxdepth 1 -name "revanced*ex.bin" -printf '%P')
          ver_code=$(aapt dump badging $yt_ex | sed -n "s/.*versionCode='\([^']*\).*/\1/p")
          yt_cp=$(find . -maxdepth 1 -name "revanced*cp.bin" -printf '%P')
          echo "YT_OUTPUTEX=$yt_ex"  >> $GITHUB_OUTPUT
          echo "YT_OUTPUTCP=$yt_cp"  >> $GITHUB_OUTPUT
          echo "VER_CODE_OUTPUT=$ver_code"  >> $GITHUB_OUTPUT
          if [ -z "$yt_ex" ]; then
            echo "RELEASE_NAME=ReVanced"  >> $GITHUB_OUTPUT
          else
            echo "RELEASE_NAME=ReVanced"  >> $GITHUB_OUTPUT
          fi
          

      - name: Upload modules to release
        uses: svenstaro/upload-release-action@v2
        with:
          body: "ReVanced"
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./build/*
          release_name: ${{ steps.get_output.outputs.RELEASE_NAME }}
          tag: ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}
          file_glob: true
          overwrite: true

      - name: Switch to update branch
        run: git checkout -f update || git switch --discard-changes --orphan update         
      
      - name: Update changelog and Magisk update jsons
        id: update_config
        run: |
          cp -f build.log latest_build_ex.md
          echo -e "\n[revanced-magisk-module repo]($GITHUB_SERVER_URL/vuongvan/magisk-module)" >>latest_build.md
          CHANGELOG_JSON=$(cat build.log | sed -e 's/([^()]*)//g' | sed -E ':a;N;$!ba;s/\r{0,1}\n/\\n/g' | sed 's/\*\*//g' | sed 's/\*/\-/g' | sed -e 's/([^()]*\])//g' | tr -d '\`' | tr '\n' '[:space:]\n' | sed -e 's!http[s]\?://\S*!!g')
          echo $CHANGELOG_JSON
          get_update_json() {
            echo "{
            \"is_microg_broken\": false,
            \"manager\": {
                   \"version\": \"$5\",
                   \"versionCode\": $6,
                   \"url\": \"https://vuongvan.github.io/VancedManager/rvmn.apk\",
                   \"changelog\": \"Custom Build APK\"
            },
            \"vanced\": {
                   \"version\": \"$1\",
                   \"versionCode\": $2,
                   \"url\": \"$3\",
                   \"changelog\": \"$4\"
            }, 
            \"microg\": {
                   \"version\": \"$7\",
                   \"versionCode\": $8,
                   \"url\": \"https://github.com/inotia00/VancedMicroG/releases/latest/download/microg.apk\",
                   \"changelog\": \"- Updated libs and upstream to 2022/08/22\n- Removed some unused resources\n- App signature changed\"
           }
          }"
          }
          if [ -n "${{ steps.get_output.outputs.YT_OUTPUTEX }}" ]; then
            YT_VER=$(echo "${{ steps.get_output.outputs.BUILD_LOG }}" | sed -n 's/.*YouTube version:\(.*\)/\1/p')
            VER_CODE=${{ steps.get_output.outputs.VER_CODE_OUTPUT }}
            PVER_CODE=$(echo "${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}" | sed -e 's/\.//g')
            RM_VER_NAME=${{ steps.next_ver_code.outputs.RM_VER_NAME_OUTPUT }}
            RM_VER_CODE=${{ steps.next_ver_code.outputs.RM_VER_CODE_OUTPUT }}
            MG_VER_NAME=${{ steps.next_ver_code.outputs.MG_VER_NAME_OUTPUT }}
            MG_VER_CODE=${{ steps.next_ver_code.outputs.MG_VER_CODE_OUTPUT }}
            YTEX_DLURL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{ steps.next_ver_code.outputs.NEXT_VER_CODE}}/${{ steps.get_output.outputs.YT_OUTPUTEX }}"
            YTCP_DLURL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{ steps.next_ver_code.outputs.NEXT_VER_CODE}}/${{ steps.get_output.outputs.YT_OUTPUTCP }}"
            UPDATE_YT_JSON=$(get_update_json "$YT_VER.$PVER_CODE" "$VER_CODE" "$YTEX_DLURL" "$CHANGELOG_JSON" "$RM_VER_NAME" "$RM_VER_CODE" "$MG_VER_NAME" "$MG_VER_CODE")
            UPDATE_YTCP_JSON=$(get_update_json "$YT_VER.$PVER_CODE" "$VER_CODE" "$YTCP_DLURL" "$CHANGELOG_JSON" "$RM_VER_NAME" "$RM_VER_CODE" "$MG_VER_NAME" "$MG_VER_CODE")
            echo "$UPDATE_YT_JSON" >yt-extended.json
            cp yt-extended.json yt-stable.json
            echo "$UPDATE_YTCP_JSON" >yt-extendedbeta.json
            YT_VER_TRIM=$(echo "${YT_VER}" | tr -d ' '| sed -e 's/\.//g')
            mkdir -p "${YT_VER_TRIM}"
            echo "$UPDATE_YT_JSON" >"${YT_VER_TRIM}/${PVER_CODE}-ex.json"
          fi

          if [ -n "${{ steps.get_output.outputs.MUSIC_OUTPUT_ARM64 }}" ]; then
            MUSIC_VER=$(echo "${{ steps.get_output.outputs.BUILD_LOG }}" | sed -n 's/.*Music (arm64-v8a) version: \(.*\)/\1/p')
            MUSIC_ARM64_DLURL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{ steps.next_ver_code.outputs.NEXT_VER_CODE}}/${{ steps.get_output.outputs.MUSIC_OUTPUT_ARM64 }}"
            UPDATE_MUSIC_ARM64_JSON=$(get_update_json "$MUSIC_VER" "${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}" "$MUSIC_ARM64_DLURL" "$CHANGELOG_JSON")
            echo "$UPDATE_MUSIC_ARM64_JSON" >music-update-arm64-v8a.json
          fi
          if [ ! -f *.json ]; then : >dummy.json; fi

      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          branch: update
          skip_checkout: true
          file_pattern: latest_build_ex.md *.json
          commit_message: Bump version ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}
